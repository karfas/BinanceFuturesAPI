# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UserTradesResponse_inner

    UserTradesResponseInner(;
        buyer=nothing,
        commission=nothing,
        commissionAsset=nothing,
        id=nothing,
        maker=nothing,
        orderId=nothing,
        price=nothing,
        qty=nothing,
        quoteQty=nothing,
        realizedPnl=nothing,
        side=nothing,
        positionSide=nothing,
        symbol=nothing,
        time=nothing,
    )

    - buyer::Bool : True if the trade was a buy
    - commission::String : Commission charged for the trade
    - commissionAsset::String : Asset in which commission was charged
    - id::Int64 : Trade ID
    - maker::Bool : True if the trade was a maker trade
    - orderId::Int64 : Order ID
    - price::String : Trade price
    - qty::String : Trade quantity
    - quoteQty::String : Quote quantity
    - realizedPnl::String : Realized profit and loss
    - side::String : Trade side (BUY/SELL)
    - positionSide::String : Position side (BOTH/LONG/SHORT)
    - symbol::String : Trading pair symbol
    - time::Int64 : Trade timestamp
"""
Base.@kwdef mutable struct UserTradesResponseInner <: OpenAPI.APIModel
    buyer::Union{Nothing, Bool} = nothing
    commission::Union{Nothing, String} = nothing
    commissionAsset::Union{Nothing, String} = nothing
    id::Union{Nothing, Int64} = nothing
    maker::Union{Nothing, Bool} = nothing
    orderId::Union{Nothing, Int64} = nothing
    price::Union{Nothing, String} = nothing
    qty::Union{Nothing, String} = nothing
    quoteQty::Union{Nothing, String} = nothing
    realizedPnl::Union{Nothing, String} = nothing
    side::Union{Nothing, String} = nothing
    positionSide::Union{Nothing, String} = nothing
    symbol::Union{Nothing, String} = nothing
    time::Union{Nothing, Int64} = nothing

    function UserTradesResponseInner(buyer, commission, commissionAsset, id, maker, orderId, price, qty, quoteQty, realizedPnl, side, positionSide, symbol, time, )
        OpenAPI.validate_property(UserTradesResponseInner, Symbol("buyer"), buyer)
        OpenAPI.validate_property(UserTradesResponseInner, Symbol("commission"), commission)
        OpenAPI.validate_property(UserTradesResponseInner, Symbol("commissionAsset"), commissionAsset)
        OpenAPI.validate_property(UserTradesResponseInner, Symbol("id"), id)
        OpenAPI.validate_property(UserTradesResponseInner, Symbol("maker"), maker)
        OpenAPI.validate_property(UserTradesResponseInner, Symbol("orderId"), orderId)
        OpenAPI.validate_property(UserTradesResponseInner, Symbol("price"), price)
        OpenAPI.validate_property(UserTradesResponseInner, Symbol("qty"), qty)
        OpenAPI.validate_property(UserTradesResponseInner, Symbol("quoteQty"), quoteQty)
        OpenAPI.validate_property(UserTradesResponseInner, Symbol("realizedPnl"), realizedPnl)
        OpenAPI.validate_property(UserTradesResponseInner, Symbol("side"), side)
        OpenAPI.validate_property(UserTradesResponseInner, Symbol("positionSide"), positionSide)
        OpenAPI.validate_property(UserTradesResponseInner, Symbol("symbol"), symbol)
        OpenAPI.validate_property(UserTradesResponseInner, Symbol("time"), time)
        return new(buyer, commission, commissionAsset, id, maker, orderId, price, qty, quoteQty, realizedPnl, side, positionSide, symbol, time, )
    end
end # type UserTradesResponseInner

const _property_types_UserTradesResponseInner = Dict{Symbol,String}(Symbol("buyer")=>"Bool", Symbol("commission")=>"String", Symbol("commissionAsset")=>"String", Symbol("id")=>"Int64", Symbol("maker")=>"Bool", Symbol("orderId")=>"Int64", Symbol("price")=>"String", Symbol("qty")=>"String", Symbol("quoteQty")=>"String", Symbol("realizedPnl")=>"String", Symbol("side")=>"String", Symbol("positionSide")=>"String", Symbol("symbol")=>"String", Symbol("time")=>"Int64", )
OpenAPI.property_type(::Type{ UserTradesResponseInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UserTradesResponseInner[name]))}

function check_required(o::UserTradesResponseInner)
    true
end

function OpenAPI.validate_property(::Type{ UserTradesResponseInner }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "UserTradesResponseInner", :format, val, "int64")
    end
    if name === Symbol("orderId")
        OpenAPI.validate_param(name, "UserTradesResponseInner", :format, val, "int64")
    end
    if name === Symbol("side")
        OpenAPI.validate_param(name, "UserTradesResponseInner", :enum, val, ["BUY", "SELL"])
    end
    if name === Symbol("positionSide")
        OpenAPI.validate_param(name, "UserTradesResponseInner", :enum, val, ["BOTH", "LONG", "SHORT"])
    end
    if name === Symbol("time")
        OpenAPI.validate_param(name, "UserTradesResponseInner", :format, val, "int64")
    end
end
