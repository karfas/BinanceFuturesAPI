# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PositionRiskResponse_inner

    PositionRiskResponseInner(;
        entryPrice=nothing,
        marginType=nothing,
        isAutoAddMargin=nothing,
        isolatedMargin=nothing,
        leverage=nothing,
        liquidationPrice=nothing,
        markPrice=nothing,
        maxNotional=nothing,
        positionAmt=nothing,
        symbol=nothing,
        unRealizedProfit=nothing,
        positionSide=nothing,
        updateTime=nothing,
    )

    - entryPrice::String : Entry price
    - marginType::String : Margin type (isolated or cross)
    - isAutoAddMargin::Bool : Is auto add margin enabled
    - isolatedMargin::String : Isolated margin
    - leverage::String : Current leverage
    - liquidationPrice::String : Liquidation price
    - markPrice::String : Mark price
    - maxNotional::String : Maximum notional
    - positionAmt::String : Position amount
    - symbol::String : Trading pair symbol
    - unRealizedProfit::String : Unrealized profit
    - positionSide::String : Position side (BOTH/LONG/SHORT)
    - updateTime::Int64 : Update time
"""
Base.@kwdef mutable struct PositionRiskResponseInner <: OpenAPI.APIModel
    entryPrice::Union{Nothing, String} = nothing
    marginType::Union{Nothing, String} = nothing
    isAutoAddMargin::Union{Nothing, Bool} = nothing
    isolatedMargin::Union{Nothing, String} = nothing
    leverage::Union{Nothing, String} = nothing
    liquidationPrice::Union{Nothing, String} = nothing
    markPrice::Union{Nothing, String} = nothing
    maxNotional::Union{Nothing, String} = nothing
    positionAmt::Union{Nothing, String} = nothing
    symbol::Union{Nothing, String} = nothing
    unRealizedProfit::Union{Nothing, String} = nothing
    positionSide::Union{Nothing, String} = nothing
    updateTime::Union{Nothing, Int64} = nothing

    function PositionRiskResponseInner(entryPrice, marginType, isAutoAddMargin, isolatedMargin, leverage, liquidationPrice, markPrice, maxNotional, positionAmt, symbol, unRealizedProfit, positionSide, updateTime, )
        OpenAPI.validate_property(PositionRiskResponseInner, Symbol("entryPrice"), entryPrice)
        OpenAPI.validate_property(PositionRiskResponseInner, Symbol("marginType"), marginType)
        OpenAPI.validate_property(PositionRiskResponseInner, Symbol("isAutoAddMargin"), isAutoAddMargin)
        OpenAPI.validate_property(PositionRiskResponseInner, Symbol("isolatedMargin"), isolatedMargin)
        OpenAPI.validate_property(PositionRiskResponseInner, Symbol("leverage"), leverage)
        OpenAPI.validate_property(PositionRiskResponseInner, Symbol("liquidationPrice"), liquidationPrice)
        OpenAPI.validate_property(PositionRiskResponseInner, Symbol("markPrice"), markPrice)
        OpenAPI.validate_property(PositionRiskResponseInner, Symbol("maxNotional"), maxNotional)
        OpenAPI.validate_property(PositionRiskResponseInner, Symbol("positionAmt"), positionAmt)
        OpenAPI.validate_property(PositionRiskResponseInner, Symbol("symbol"), symbol)
        OpenAPI.validate_property(PositionRiskResponseInner, Symbol("unRealizedProfit"), unRealizedProfit)
        OpenAPI.validate_property(PositionRiskResponseInner, Symbol("positionSide"), positionSide)
        OpenAPI.validate_property(PositionRiskResponseInner, Symbol("updateTime"), updateTime)
        return new(entryPrice, marginType, isAutoAddMargin, isolatedMargin, leverage, liquidationPrice, markPrice, maxNotional, positionAmt, symbol, unRealizedProfit, positionSide, updateTime, )
    end
end # type PositionRiskResponseInner

const _property_types_PositionRiskResponseInner = Dict{Symbol,String}(Symbol("entryPrice")=>"String", Symbol("marginType")=>"String", Symbol("isAutoAddMargin")=>"Bool", Symbol("isolatedMargin")=>"String", Symbol("leverage")=>"String", Symbol("liquidationPrice")=>"String", Symbol("markPrice")=>"String", Symbol("maxNotional")=>"String", Symbol("positionAmt")=>"String", Symbol("symbol")=>"String", Symbol("unRealizedProfit")=>"String", Symbol("positionSide")=>"String", Symbol("updateTime")=>"Int64", )
OpenAPI.property_type(::Type{ PositionRiskResponseInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PositionRiskResponseInner[name]))}

function check_required(o::PositionRiskResponseInner)
    true
end

function OpenAPI.validate_property(::Type{ PositionRiskResponseInner }, name::Symbol, val)
    if name === Symbol("updateTime")
        OpenAPI.validate_param(name, "PositionRiskResponseInner", :format, val, "int64")
    end
end
