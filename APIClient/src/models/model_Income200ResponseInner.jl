# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""income_200_response_inner

    Income200ResponseInner(;
        symbol=nothing,
        incomeType=nothing,
        income=nothing,
        asset=nothing,
        info=nothing,
        time=nothing,
        tranId=nothing,
        tradeId=nothing,
    )

    - symbol::String : Trading pair
    - incomeType::String : Income type
    - income::String : Income amount
    - asset::String : Asset name
    - info::String : Additional information
    - time::Int64 : Transaction time in ms
    - tranId::String : Transaction ID
    - tradeId::String : Trade ID if the income is from a trade
"""
Base.@kwdef mutable struct Income200ResponseInner <: OpenAPI.APIModel
    symbol::Union{Nothing, String} = nothing
    incomeType::Union{Nothing, String} = nothing
    income::Union{Nothing, String} = nothing
    asset::Union{Nothing, String} = nothing
    info::Union{Nothing, String} = nothing
    time::Union{Nothing, Int64} = nothing
    tranId::Union{Nothing, String} = nothing
    tradeId::Union{Nothing, String} = nothing

    function Income200ResponseInner(symbol, incomeType, income, asset, info, time, tranId, tradeId, )
        OpenAPI.validate_property(Income200ResponseInner, Symbol("symbol"), symbol)
        OpenAPI.validate_property(Income200ResponseInner, Symbol("incomeType"), incomeType)
        OpenAPI.validate_property(Income200ResponseInner, Symbol("income"), income)
        OpenAPI.validate_property(Income200ResponseInner, Symbol("asset"), asset)
        OpenAPI.validate_property(Income200ResponseInner, Symbol("info"), info)
        OpenAPI.validate_property(Income200ResponseInner, Symbol("time"), time)
        OpenAPI.validate_property(Income200ResponseInner, Symbol("tranId"), tranId)
        OpenAPI.validate_property(Income200ResponseInner, Symbol("tradeId"), tradeId)
        return new(symbol, incomeType, income, asset, info, time, tranId, tradeId, )
    end
end # type Income200ResponseInner

const _property_types_Income200ResponseInner = Dict{Symbol,String}(Symbol("symbol")=>"String", Symbol("incomeType")=>"String", Symbol("income")=>"String", Symbol("asset")=>"String", Symbol("info")=>"String", Symbol("time")=>"Int64", Symbol("tranId")=>"String", Symbol("tradeId")=>"String", )
OpenAPI.property_type(::Type{ Income200ResponseInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Income200ResponseInner[name]))}

function check_required(o::Income200ResponseInner)
    true
end

function OpenAPI.validate_property(::Type{ Income200ResponseInner }, name::Symbol, val)
    if name === Symbol("incomeType")
        OpenAPI.validate_param(name, "Income200ResponseInner", :enum, val, ["TRANSFER", "WELCOME_BONUS", "REALIZED_PNL", "FUNDING_FEE", "COMMISSION", "INSURANCE_CLEAR", "REFERRAL_KICKBACK", "COMMISSION_REBATE", "API_REBATE", "CONTEST_REWARD", "CROSS_COLLATERAL_TRANSFER", "OPTIONS_PREMIUM_FEE", "OPTIONS_SETTLE_PROFIT", "INTERNAL_TRANSFER", "AUTO_EXCHANGE", "DELIVERED_SETTELMENT", "COIN_SWAP_DEPOSIT", "COIN_SWAP_WITHDRAW", "POSITION_LIMIT_INCREASE_FEE"])
    end
    if name === Symbol("time")
        OpenAPI.validate_param(name, "Income200ResponseInner", :format, val, "int64")
    end
end
