# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FundingRateResponse_inner

    FundingRateResponseInner(;
        symbol=nothing,
        fundingRate=nothing,
        fundingTime=nothing,
    )

    - symbol::String : Trading pair symbol
    - fundingRate::String : Funding rate
    - fundingTime::Int64 : Funding time
"""
Base.@kwdef mutable struct FundingRateResponseInner <: OpenAPI.APIModel
    symbol::Union{Nothing, String} = nothing
    fundingRate::Union{Nothing, String} = nothing
    fundingTime::Union{Nothing, Int64} = nothing

    function FundingRateResponseInner(symbol, fundingRate, fundingTime, )
        OpenAPI.validate_property(FundingRateResponseInner, Symbol("symbol"), symbol)
        OpenAPI.validate_property(FundingRateResponseInner, Symbol("fundingRate"), fundingRate)
        OpenAPI.validate_property(FundingRateResponseInner, Symbol("fundingTime"), fundingTime)
        return new(symbol, fundingRate, fundingTime, )
    end
end # type FundingRateResponseInner

const _property_types_FundingRateResponseInner = Dict{Symbol,String}(Symbol("symbol")=>"String", Symbol("fundingRate")=>"String", Symbol("fundingTime")=>"Int64", )
OpenAPI.property_type(::Type{ FundingRateResponseInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FundingRateResponseInner[name]))}

function check_required(o::FundingRateResponseInner)
    true
end

function OpenAPI.validate_property(::Type{ FundingRateResponseInner }, name::Symbol, val)



    if name === Symbol("fundingTime")
        OpenAPI.validate_param(name, "FundingRateResponseInner", :format, val, "int64")
    end
end
