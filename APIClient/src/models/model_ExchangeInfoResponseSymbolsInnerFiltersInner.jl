# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ExchangeInfoResponse_symbols_inner_filters_inner

    ExchangeInfoResponseSymbolsInnerFiltersInner(;
        filterType=nothing,
        maxPrice=nothing,
        minPrice=nothing,
        tickSize=nothing,
        maxQty=nothing,
        minQty=nothing,
        stepSize=nothing,
        limit=nothing,
        notional=nothing,
        multiplierUp=nothing,
        multiplierDown=nothing,
        multiplierDecimal=nothing,
    )

    - filterType::String
    - maxPrice::String
    - minPrice::String
    - tickSize::String
    - maxQty::String
    - minQty::String
    - stepSize::String
    - limit::Int64
    - notional::String
    - multiplierUp::String
    - multiplierDown::String
    - multiplierDecimal::Int64
"""
Base.@kwdef mutable struct ExchangeInfoResponseSymbolsInnerFiltersInner <: OpenAPI.APIModel
    filterType::Union{Nothing, String} = nothing
    maxPrice::Union{Nothing, String} = nothing
    minPrice::Union{Nothing, String} = nothing
    tickSize::Union{Nothing, String} = nothing
    maxQty::Union{Nothing, String} = nothing
    minQty::Union{Nothing, String} = nothing
    stepSize::Union{Nothing, String} = nothing
    limit::Union{Nothing, Int64} = nothing
    notional::Union{Nothing, String} = nothing
    multiplierUp::Union{Nothing, String} = nothing
    multiplierDown::Union{Nothing, String} = nothing
    multiplierDecimal::Union{Nothing, Int64} = nothing

    function ExchangeInfoResponseSymbolsInnerFiltersInner(filterType, maxPrice, minPrice, tickSize, maxQty, minQty, stepSize, limit, notional, multiplierUp, multiplierDown, multiplierDecimal, )
        OpenAPI.validate_property(ExchangeInfoResponseSymbolsInnerFiltersInner, Symbol("filterType"), filterType)
        OpenAPI.validate_property(ExchangeInfoResponseSymbolsInnerFiltersInner, Symbol("maxPrice"), maxPrice)
        OpenAPI.validate_property(ExchangeInfoResponseSymbolsInnerFiltersInner, Symbol("minPrice"), minPrice)
        OpenAPI.validate_property(ExchangeInfoResponseSymbolsInnerFiltersInner, Symbol("tickSize"), tickSize)
        OpenAPI.validate_property(ExchangeInfoResponseSymbolsInnerFiltersInner, Symbol("maxQty"), maxQty)
        OpenAPI.validate_property(ExchangeInfoResponseSymbolsInnerFiltersInner, Symbol("minQty"), minQty)
        OpenAPI.validate_property(ExchangeInfoResponseSymbolsInnerFiltersInner, Symbol("stepSize"), stepSize)
        OpenAPI.validate_property(ExchangeInfoResponseSymbolsInnerFiltersInner, Symbol("limit"), limit)
        OpenAPI.validate_property(ExchangeInfoResponseSymbolsInnerFiltersInner, Symbol("notional"), notional)
        OpenAPI.validate_property(ExchangeInfoResponseSymbolsInnerFiltersInner, Symbol("multiplierUp"), multiplierUp)
        OpenAPI.validate_property(ExchangeInfoResponseSymbolsInnerFiltersInner, Symbol("multiplierDown"), multiplierDown)
        OpenAPI.validate_property(ExchangeInfoResponseSymbolsInnerFiltersInner, Symbol("multiplierDecimal"), multiplierDecimal)
        return new(filterType, maxPrice, minPrice, tickSize, maxQty, minQty, stepSize, limit, notional, multiplierUp, multiplierDown, multiplierDecimal, )
    end
end # type ExchangeInfoResponseSymbolsInnerFiltersInner

const _property_types_ExchangeInfoResponseSymbolsInnerFiltersInner = Dict{Symbol,String}(Symbol("filterType")=>"String", Symbol("maxPrice")=>"String", Symbol("minPrice")=>"String", Symbol("tickSize")=>"String", Symbol("maxQty")=>"String", Symbol("minQty")=>"String", Symbol("stepSize")=>"String", Symbol("limit")=>"Int64", Symbol("notional")=>"String", Symbol("multiplierUp")=>"String", Symbol("multiplierDown")=>"String", Symbol("multiplierDecimal")=>"Int64", )
OpenAPI.property_type(::Type{ ExchangeInfoResponseSymbolsInnerFiltersInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ExchangeInfoResponseSymbolsInnerFiltersInner[name]))}

function check_required(o::ExchangeInfoResponseSymbolsInnerFiltersInner)
    true
end

function OpenAPI.validate_property(::Type{ ExchangeInfoResponseSymbolsInnerFiltersInner }, name::Symbol, val)
end
