# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""TickerPriceChangeResponse_inner

    TickerPriceChangeResponseInner(;
        symbol=nothing,
        priceChange=nothing,
        priceChangePercent=nothing,
        weightedAvgPrice=nothing,
        lastPrice=nothing,
        lastQty=nothing,
        openPrice=nothing,
        highPrice=nothing,
        lowPrice=nothing,
        volume=nothing,
        quoteVolume=nothing,
        openTime=nothing,
        closeTime=nothing,
        firstId=nothing,
        lastId=nothing,
        count=nothing,
    )

    - symbol::String : Trading pair symbol
    - priceChange::String : Price change
    - priceChangePercent::String : Price change percent
    - weightedAvgPrice::String : Weighted average price
    - lastPrice::String : Last price
    - lastQty::String : Last quantity
    - openPrice::String : Open price
    - highPrice::String : High price
    - lowPrice::String : Low price
    - volume::String : Total volume
    - quoteVolume::String : Total quote volume
    - openTime::Int64 : Open time
    - closeTime::Int64 : Close time
    - firstId::Int64 : First trade ID
    - lastId::Int64 : Last trade ID
    - count::Int64 : Total number of trades
"""
Base.@kwdef mutable struct TickerPriceChangeResponseInner <: OpenAPI.APIModel
    symbol::Union{Nothing, String} = nothing
    priceChange::Union{Nothing, String} = nothing
    priceChangePercent::Union{Nothing, String} = nothing
    weightedAvgPrice::Union{Nothing, String} = nothing
    lastPrice::Union{Nothing, String} = nothing
    lastQty::Union{Nothing, String} = nothing
    openPrice::Union{Nothing, String} = nothing
    highPrice::Union{Nothing, String} = nothing
    lowPrice::Union{Nothing, String} = nothing
    volume::Union{Nothing, String} = nothing
    quoteVolume::Union{Nothing, String} = nothing
    openTime::Union{Nothing, Int64} = nothing
    closeTime::Union{Nothing, Int64} = nothing
    firstId::Union{Nothing, Int64} = nothing
    lastId::Union{Nothing, Int64} = nothing
    count::Union{Nothing, Int64} = nothing

    function TickerPriceChangeResponseInner(symbol, priceChange, priceChangePercent, weightedAvgPrice, lastPrice, lastQty, openPrice, highPrice, lowPrice, volume, quoteVolume, openTime, closeTime, firstId, lastId, count, )
        OpenAPI.validate_property(TickerPriceChangeResponseInner, Symbol("symbol"), symbol)
        OpenAPI.validate_property(TickerPriceChangeResponseInner, Symbol("priceChange"), priceChange)
        OpenAPI.validate_property(TickerPriceChangeResponseInner, Symbol("priceChangePercent"), priceChangePercent)
        OpenAPI.validate_property(TickerPriceChangeResponseInner, Symbol("weightedAvgPrice"), weightedAvgPrice)
        OpenAPI.validate_property(TickerPriceChangeResponseInner, Symbol("lastPrice"), lastPrice)
        OpenAPI.validate_property(TickerPriceChangeResponseInner, Symbol("lastQty"), lastQty)
        OpenAPI.validate_property(TickerPriceChangeResponseInner, Symbol("openPrice"), openPrice)
        OpenAPI.validate_property(TickerPriceChangeResponseInner, Symbol("highPrice"), highPrice)
        OpenAPI.validate_property(TickerPriceChangeResponseInner, Symbol("lowPrice"), lowPrice)
        OpenAPI.validate_property(TickerPriceChangeResponseInner, Symbol("volume"), volume)
        OpenAPI.validate_property(TickerPriceChangeResponseInner, Symbol("quoteVolume"), quoteVolume)
        OpenAPI.validate_property(TickerPriceChangeResponseInner, Symbol("openTime"), openTime)
        OpenAPI.validate_property(TickerPriceChangeResponseInner, Symbol("closeTime"), closeTime)
        OpenAPI.validate_property(TickerPriceChangeResponseInner, Symbol("firstId"), firstId)
        OpenAPI.validate_property(TickerPriceChangeResponseInner, Symbol("lastId"), lastId)
        OpenAPI.validate_property(TickerPriceChangeResponseInner, Symbol("count"), count)
        return new(symbol, priceChange, priceChangePercent, weightedAvgPrice, lastPrice, lastQty, openPrice, highPrice, lowPrice, volume, quoteVolume, openTime, closeTime, firstId, lastId, count, )
    end
end # type TickerPriceChangeResponseInner

const _property_types_TickerPriceChangeResponseInner = Dict{Symbol,String}(Symbol("symbol")=>"String", Symbol("priceChange")=>"String", Symbol("priceChangePercent")=>"String", Symbol("weightedAvgPrice")=>"String", Symbol("lastPrice")=>"String", Symbol("lastQty")=>"String", Symbol("openPrice")=>"String", Symbol("highPrice")=>"String", Symbol("lowPrice")=>"String", Symbol("volume")=>"String", Symbol("quoteVolume")=>"String", Symbol("openTime")=>"Int64", Symbol("closeTime")=>"Int64", Symbol("firstId")=>"Int64", Symbol("lastId")=>"Int64", Symbol("count")=>"Int64", )
OpenAPI.property_type(::Type{ TickerPriceChangeResponseInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TickerPriceChangeResponseInner[name]))}

function check_required(o::TickerPriceChangeResponseInner)
    true
end

function OpenAPI.validate_property(::Type{ TickerPriceChangeResponseInner }, name::Symbol, val)
    if name === Symbol("openTime")
        OpenAPI.validate_param(name, "TickerPriceChangeResponseInner", :format, val, "int64")
    end
    if name === Symbol("closeTime")
        OpenAPI.validate_param(name, "TickerPriceChangeResponseInner", :format, val, "int64")
    end
    if name === Symbol("firstId")
        OpenAPI.validate_param(name, "TickerPriceChangeResponseInner", :format, val, "int64")
    end
    if name === Symbol("lastId")
        OpenAPI.validate_param(name, "TickerPriceChangeResponseInner", :format, val, "int64")
    end
end
